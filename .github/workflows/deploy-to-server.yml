name: Deploy

on:
  workflow_dispatch:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Dependencies
        run: npm install
      - name: Format
        run: npm run format
      - name: Lint
        run: npm run lint

  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run tests
        run: |
          if [ -f docker-compose.github.test.yml ]; then
            docker-compose --file docker-compose.github.test.yml build
            docker-compose --file docker-compose.github.test.yml run sut
          else
            docker build . --file Dockerfile
          fi
    env:
      DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
      WATSON_SPEECH_API_KEY: ${{ secrets.WATSON_SPEECH_API_KEY }}
      WATSON_SPEECH_URL: ${{ secrets.WATSON_SPEECH_URL }}
      MYSQL_ROOT_PASSWORD: bruh
      MYSQL_PASSWORD: pass
      MYSQL_DATABASE: transcriberbot
      MYSQL_USER: transcriberbot
      DISCORD_TEST_TOKEN: ${{ secrets.DISCORD_TEST_TOKEN }}
      TESTING_CHANNEL_ID: '778808634226245663'
      TESTING_VOICE_CHANNEL_ID: '780612930684977173'
      PREFIX: '!'

  push:
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: yey007
          password: ${{ secrets.CR_PAT }}
      - name: Build and push
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          push: true
          tags: |
            yey007/transcriberbot:latest
            ghcr.io/yey007/transcriberbot:latest
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  deploy:
    needs: [push]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Copy docker-compose.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: 'docker-compose.yml'
          target: 'C:\Users\${{ secrets.SERVER_USERNAME }}\Desktop\TranscriberBot'
      - name: Start new container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd C:\Users\${{ secrets.SERVER_USERNAME }}\Desktop\TranscriberBot
            docker-compose stop
            docker image prune -f
            docker pull yey007/transcriberbot
            docker-compose up -d
